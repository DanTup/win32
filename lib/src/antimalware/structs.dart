// Copyright (c) 2020, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// Dart representations of common structs used in the Win32 API.

// THIS FILE IS GENERATED AUTOMATICALLY AND SHOULD NOT BE EDITED DIRECTLY.

// -----------------------------------------------------------------------------
// Linter exceptions
// -----------------------------------------------------------------------------
// ignore_for_file: camel_case_types ignore_for_file: camel_case_extensions
//
// Why? The linter defaults to throw a warning for types not named as camel
// case. We deliberately break this convention to match the Win32 underlying
// types.
//
//
// ignore_for_file: unused_field
//
// Why? The linter complains about unused fields (e.g. a class that contains
// underscore-prefixed members that are not used in the library. In this class,
// we use this feature to ensure that sizeOf<STRUCT_NAME> returns a size at
// least as large as the underlying native struct. See, for example,
// ENUMLOGFONTEX.
//
//
// ignore_for_file: unnecessary_getters_setters
//
// Why? In structs like VARIANT, we're using getters and setters to project the
// same underlying data property to various union types. The trivial overhead is
// outweighed by readability.
//
//
// ignore_for_file: unused_import
//
// Why? We speculatively include some imports that we might generate a
// requirement for.
// -----------------------------------------------------------------------------

import 'dart:ffi';
import 'dart:typed_data';

import 'package:ffi/ffi.dart';

class HAMSICONTEXT extends Struct {
  @IntPtr()
  external int Value;
}

class HAMSISESSION extends Struct {
  @IntPtr()
  external int Value;
}

class AMSI_UAC_REQUEST_EXE_INFO extends Struct {
  @Uint32()
  external int ulLength;
  external Pointer<Utf16> lpwszApplicationName;
  external Pointer<Utf16> lpwszCommandLine;
  external Pointer<Utf16> lpwszDLLParameter;
}

class AMSI_UAC_REQUEST_COM_INFO extends Struct {
  @Uint32()
  external int ulLength;
  external Pointer<Utf16> lpwszServerBinary;
  external Pointer<Utf16> lpwszRequestor;
  external GUID Clsid;
}

class AMSI_UAC_REQUEST_MSI_INFO extends Struct {
  @Uint32()
  external int ulLength;
  @Uint32()
  external int MsiAction;
  external Pointer<Utf16> lpwszProductName;
  external Pointer<Utf16> lpwszVersion;
  external Pointer<Utf16> lpwszLanguage;
  external Pointer<Utf16> lpwszManufacturer;
  external Pointer<Utf16> lpwszPackagePath;
  external Pointer<Utf16> lpwszPackageSource;
  @Uint32()
  external int ulUpdates;
  external Pointer<Pointer<Utf16>> ppwszUpdates;
  external Pointer<Pointer<Utf16>> ppwszUpdateSources;
}

class AMSI_UAC_REQUEST_AX_INFO extends Struct {
  @Uint32()
  external int ulLength;
  external Pointer<Utf16> lpwszLocalInstallPath;
  external Pointer<Utf16> lpwszSourceURL;
}

class AMSI_UAC_REQUEST_PACKAGED_APP_INFO extends Struct {
  @Uint32()
  external int ulLength;
  external Pointer<Utf16> lpwszApplicationName;
  external Pointer<Utf16> lpwszCommandLine;
  external Pointer<Utf16> lpPackageFamilyName;
  external Pointer<Utf16> lpApplicationId;
}

class AMSI_UAC_REQUEST_CONTEXT extends Struct {
  @Uint32()
  external int ulLength;
  @Uint32()
  external int ulRequestorProcessId;
  @Uint32()
  external int UACTrustState;
  @Uint32()
  external int Type;
  @Uint32()
  external int RequestType;
  @Int32()
  external int bAutoElevateRequest;
}

class CAntimalware extends Struct {}
